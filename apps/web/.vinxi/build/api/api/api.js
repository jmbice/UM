import{eventHandler as d,toWebRequest as p}from"@tanstack/start-server-core";const P=[{path:"/__root",filePath:"/Users/jordanbice/Code/ts-start-tree/src/routes/__root.tsx"},{path:"/",filePath:"/Users/jordanbice/Code/ts-start-tree/src/routes/index.tsx"},{path:"/guitar/:$guitarId?",filePath:"/Users/jordanbice/Code/ts-start-tree/src/routes/guitar/$guitarId.tsx"}],m=["GET","POST","PUT","PATCH","DELETE","OPTIONS","HEAD"];function R(r){return d(async n=>{const o=p(n);return await r({request:o})})}function g(r,n){const o=r.pathname.split("/").filter(Boolean),l=n.sort((e,t)=>{const s=e.routePath.split("/").filter(Boolean);return t.routePath.split("/").filter(Boolean).length-s.length}).filter(e=>{const t=e.routePath.split("/").filter(Boolean);return o.length>=t.length});for(const e of l){const t=e.routePath.split("/").filter(Boolean),s={};let a=!0;for(let i=0;i<t.length;i++){const c=t[i],h=o[i];if(c.startsWith("$"))if(c==="$"){const u=o.slice(i).join("/");if(u!=="")s["*"]=u,s._splat=u;else{a=!1;break}}else{const u=c.slice(1);s[u]=h}else if(c!==h){a=!1;break}}if(a)return{routePath:e.routePath,params:s,payload:e.payload}}}const f=P.filter(r=>r.$APIRoute);function w(r){const n=[];return r.forEach(o=>{const e=o.path.split("/").filter(Boolean).map(t=>t==="*splat"?"$":t.startsWith(":$")&&t.endsWith("?")?t.slice(1,-1):t).join("/");n.push({routePath:`/${e}`,payload:o})}),n}const I=async({request:r})=>{if(!f.length)return new Response("No routes found",{status:404});if(!m.includes(r.method))return new Response("Method not allowed",{status:405});const n=w(f),o=new URL(r.url,"http://localhost:3000"),l=g(o,n);if(!l)return new Response("Not found",{status:404});let e;try{e=await l.payload.$APIRoute.import().then(a=>a.APIRoute)}catch(a){return console.error("Error importing route file:",a),new Response("Internal server error",{status:500})}if(!e)return new Response("Internal server error",{status:500});const t=r.method,s=e.methods[t];return s?await s({request:r,params:l.params}):new Response("Method not allowed",{status:405})},T=R(I);export{T as default};
